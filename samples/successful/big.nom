// At time of writing, Parsley is not all that good at parsing really nested things.
// Each level of nesting doubles the runtime.
// See: https://github.com/jackcasey067/Nom/issues/19

// Update: I replaced Parsley's algorithm for a better one. We should have a much
// higher effective depth. 

// Now it looks like the problem is stack space. To go further, we'd want to use the
// stacker library to make the recursive calls safe. This has already been done in
// Parsley, where it matters most.
// We have a lot of recursive functions here. Maybe a macro would help?

//! 40

fn main() -> i32 {
    1 + {1 + {1 + {1 + {1 + {1 + {1 + {1 + {1 + { 1 + {
    1 + {1 + {1 + {1 + {1 + {1 + {1 + {1 + {1 + { 1 + {
    1 + {1 + {1 + {1 + {1 + {1 + {1 + {1 + {1 + { 1 + {
    1 + {1 + {1 + {1 + {1 + {1 + {1 + {1 + {1 + { 1 + {

        0

    }}}}}}}}}}
    }}}}}}}}}}
    }}}}}}}}}}
    }}}}}}}}}}
}
