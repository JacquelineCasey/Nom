# This file is included directly in the final binary

# Start Rule

Program
    : Declaration+
    ;



# Declarations - top level declarations in the program
Declaration
    : FunctionDeclaration 
    | VariableDeclaration _Semicolon
    ;

# TODO: Add return type
FunctionDeclaration
    : _Fn _Identifier ParameterList _ThinRightArrow Type BlockExpression
    ;

# TODO: Add parameters
ParameterList
    : _LeftParenthesis (_Identifier _Colon Type (_Comma _Identifier _Colon Type)*)? _RightParenthesis
    ;

VariableDeclaration
    : (_Var | _Val) _Identifier (_Colon Type)? _Equals Expression 
    ;



# Expressions - This section encodes operator precedence, but not associativity.

Expression 
    : OrExpression
    | ReturnExpression
    ;

ReturnExpression
    : _Return Expression
    ;

OrExpression
    : AndExpression (_Or AndExpression)*
    ;

AndExpression
    : NotExpression (_And NotExpression)*
    ;

# Of course might not contain a "not"
NotExpression
    : _Not NotExpression
    | ComparisonExpression
    ;

ComparisonExpression
    : AdditiveExpression ((_DoubleEquals | _NotEquals | _LessEquals | _GreaterEquals | _Less | _Greater ) AdditiveExpression)?
    ;

AdditiveExpression 
    : MultiplicativeExpression ((_Plus | _Minus) MultiplicativeExpression)*
    ;

MultiplicativeExpression 
    : PrimaryExpression ((_Times | _Divide | _Modulus) PrimaryExpression)* 
    ;

PrimaryExpression 
    : Literal
    | _LeftParenthesis Expression _RightParenthesis
    | BlockExpression
    | _Identifier
    | FunctionCall
    | IfExpression
    | WhileExpression  # Always returns unit for now, but someday might be more expression-y.
    ; 

FunctionCall
    : _Identifier _LeftParenthesis (Expression (_Comma Expression)*)? _RightParenthesis
    ;

IfExpression
    : _If Expression BlockExpression (_Else (BlockExpression | IfExpression))?
    ;

WhileExpression
    : _While Expression BlockExpression
    ;

# Blocks are also expressions. They follow Rust rules, evaluating to the final expression,
# or the unit type if the final expression has a semicolon (or is some other statement).

BlockExpression
    : _LeftCurlyBrace (Statement)* (Expression)? _RightCurlyBrace
    ;

# Statements - These constructs do not yield any value, not even unit. They can be
# nested in an expression only by way of a BlockExpression.

Statement
    : Expression _Semicolon
    | Declaration  # Semicolon included
    | AssignmentStatement _Semicolon
    | CompoundAssignmentStatement _Semicolon
    ;

AssignmentStatement
    : Expression _Equals Expression
    ;

CompoundAssignmentStatement
    : Expression (_PlusEquals | _MinusEquals | _TimesEquals | _DivideEquals) Expression
    ;



# Literals - Currently just positive integers

Literal
    : _NumericLiteral
    | BooleanLiteral
    ;

BooleanLiteral
    : _True
    | _False
    ;



# Types

Type
    : _Identifier
    ;