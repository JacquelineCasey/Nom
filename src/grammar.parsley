# This file is included directly in the final binary

# Start Rule

Program
    : WS? Expression WS?
    ;



# Expressions - This section encodes operator precedence, but not associativity.

Expression 
    : AdditiveExpression
    ;

AdditiveExpression 
    : MultiplicativeExpression (WS? ("+" | "-") WS? MultiplicativeExpression)*
    ;

MultiplicativeExpression 
    : PrimaryExpression (WS? ("*" | "/") WS? PrimaryExpression)* 
    ;

PrimaryExpression 
    : Literal
    | "(" WS? Expression WS? ")"
    | BlockExpression
    ; 

# Blocks are also expressions. They follow Rust rules, evaluating to the final expression,
# or the unit type if the final expression has a semicolon (or is some other statement).

BlockExpression
    : "{" WS? (Statement WS? ";" WS?)* (Expression WS?)? "}"
    ;



# Statements - These constructs do not yield any value, not even unit. They can be
# nested in an expression only by way of a BlockExpression.

Statement
    : AssignmentStatement
    # : CompoundAssignmentStatement
    ;

AssignmentStatement
    : Expression WS? "=" WS? Expression
    ;


# Literals - Currently just positive integers

Literal
    : Digit+
    ;



# Character Classes

# WS is required whitespace. WS? is optional, and likely will be more commonly used.
WS  
    : (" " | "\t" | "\n" | "\r\n")+
    ;

Digit
    : "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" 
    ;

